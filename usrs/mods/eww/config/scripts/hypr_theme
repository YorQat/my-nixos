#!/usr/bin/env lua

-- MIT License

-- Copyright (c) 2023 YorQat

-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:

-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

-- Contact: YorQat <qarkdev+gh@gmail.com>

local filepath = arg[1]  -- Get file path from command line argument

if not filepath then
  print("Usage: lua script.lua <filepath>")
  return
end

local file = io.open(filepath, "r")  -- Open the file in read mode

if not file then
  print("Failed to open the file:", filepath)
  return
end

local output = file:read("*all")  -- Read the entire file content
file:close()  -- Close the file

local lines = {}  -- Table to store parsed lines
local currentParent = ""  -- Track current parent for nested properties

-- Iterate through each line of the file
for line in output:gmatch("[^\r\n]+") do
    local trimmedLine = line:match("^%s*(.-)%s*$")
    
    if trimmedLine ~= "" then
        if trimmedLine:match("%{") then  -- Opening brace indicates a new parent
            currentParent = trimmedLine:match("(%a+)%s*%{")
        elseif trimmedLine:match("%}") then  -- Closing brace indicates end of parent
            currentParent = ""
        else
            local property, value = trimmedLine:match("(%S+)%s*=%s*(.+)")  -- Extract property and value
            if property and value then
                local outputLine = "keyword " .. currentParent .. ":" .. property .. " " .. value
                table.insert(lines, outputLine)  -- Store the parsed line
            else
                print("Failed to parse line:", trimmedLine)
                return
            end
        end
    end
end

if #lines == 0 then
    print("No valid lines found in the file.")
    return
end

local script = 'hyprctl --batch "' .. table.concat(lines, '; ') .. '"'  -- Generate the final script string
print(script)

-- Execute the script
os.execute(script)
